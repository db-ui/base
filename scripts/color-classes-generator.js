/**
 * Generate Color Utilities (Classes and SCSS Placeholders) for color dependencies
 * according to definitions made by DB UI v3
 */

const prefix = 'db';

/**
 * some backgrounds have more than one variant with the same color for text (on-color)
 * e.g. neutral with variants 1-6
 */

const generateBGVariants = (value, index, currentColorObj, baseColorObj) => {
	return `
.${prefix}-${value}-${index} {    
    @extend %${prefix}-bg-${value}-${index}; 

    &-ia,
    &[data-variant="ia"] {
        @extend %${prefix}-bg-${value}-${index}-ia;
    }

    a {
         @extend %${prefix}-bg-${value}-${index}-text-ia;
    }

    .db-weak {
        @extend %weak;

        &-ia,
        &[data-variant="ia"],
        a {
             @extend %weak-ia;
        }
    }
}
`;
};

/**
 * generates color utility classes and scss placeholders for non-interactive and interactive variants
 * of color combination (background-color and color) based on definitions made by DB UI v3
 *
 * @param {*} colorToken scss transform obj generated by styleDictionary
 * @returns scss string
 */
exports.generateColorUtilitityClasses = (colorToken) => {
	let output = '';

	Object.keys(colorToken).forEach((value, index) => {
		output += `/**
* ${value.toUpperCase()} - Utility Classes          
**/
`;
		output += `
.${prefix}-${value} {
    @extend %${prefix}-bg-${value};
        
    &-ia,
    &[data-variant="ia"] {
        @extend %${prefix}-bg-${value}-ia;
    }

    a {
        @extend %${prefix}-bg-${value}-text-ia;
    }
}`;

		// special case neutral has no default value for enabled
		if (colorToken[value].bg.enabled) {
			// weak variants
			output += `
.${prefix}-${value}-light {    
     @extend %${prefix}-bg-${value}-light;
    
    &-ia,
    &[data-variant="ia"] {
        @extend %${prefix}-bg-${value}-light-ia;
    }

    a {
         @extend %${prefix}-bg-${value}-light-text-ia;
    }

    .db-weak {
        @extend %weak;

        &-ia,
        &[data-variant="ia"],
        a {
            @extend %weak-ia;
        }
    }
}
`;
		} else {
			Object.keys(colorToken[value].bg).forEach((variant) => {
				output += generateBGVariants(
					value,
					variant,
					colorToken[value].bg[variant],
					colorToken[value].on.bg
				);
			});
		}
	});

	return output;
};
