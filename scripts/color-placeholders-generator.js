/**
 * Generate Color Utilities (Classes and SCSS Placeholders) for color dependencies
 * according to definitions made by DB UI v3
 */

const prefix = 'db';

const generateInteractiveVariants = (currentColorObject, cssProp) => {
	return `
        &:hover {
            ${cssProp}: $${prefix}-${currentColorObject.hover.name};
        }

        &:active {
            ${cssProp}: $${prefix}-${currentColorObject.pressed.name};
        }
        `;
};

/**
 * Backgrounds have more than one variant with the same color for text (on-color)
 * e.g. neutral with variants 1-6 or transparent-full or transparent-semi
 */

const generateBGVariants = (
	value,
	index,
	currentColorObject,
	baseColorObject
) => {
	return `
%${prefix}-bg-${value}-${index} {
    background-color: $${prefix}-${currentColorObject.enabled.name};
    color: $${prefix}-${baseColorObject.enabled.name};

    &-ia,
    &[data-variant="ia"] {
        @extend %${prefix}-bg-${value}-${index};
        ${generateInteractiveVariants(currentColorObject, 'background-color')}
    }

    &-text-ia,
    &[data-variant="text-ia"] {
        color: $${prefix}-${baseColorObject.enabled.name};
         ${generateInteractiveVariants(baseColorObject, 'color')}
    }

    %weak {
        color: $${prefix}-${baseColorObject.weak.enabled.name};

        &-ia,
        &[data-variant="ia"] {
            color: $${prefix}-${baseColorObject.weak.enabled.name};
            ${generateInteractiveVariants(baseColorObject.weak, 'color')}
        }
    }
}
`;
};

/**
 * Generates color utility classes and scss placeholders for non-interactive and interactive variants
 * of color combination (background-color and color) based on definitions made by DB UI v3
 *
 * @param {*} colorToken scss transform obj generated by styleDictionary
 * @returns scss string
 */
exports.generateColorUtilitityPlaceholder = (colorToken) => {
	let output = '';

	for (const [, value] of Object.keys(colorToken).entries()) {
		output += `/**
* ${value.toUpperCase()} - Placeholder Utilities
**/
`;
		// Text colors with interactive variant, e.g. primary
		if (colorToken[value].enabled) {
			output += `%${prefix}-text-${value} {
    color: $${prefix}-${colorToken[value].enabled.name};

    &-ia,
    &[data-variant="ia"] {
        color: $${prefix}-${colorToken[value].enabled.name};
        ${generateInteractiveVariants(colorToken[value], 'color')}
    }
}
`;

			// Text and background colors
			output += `
%${prefix}-bg-${value} {
    background-color: $${prefix}-${colorToken[value].enabled.name};
    color: $${prefix}-${colorToken[value].on.enabled.name};

    &-ia,
    &[data-variant="ia"] {
        @extend %${prefix}-bg-${value};
        ${generateInteractiveVariants(colorToken[value], 'background-color')}
    }

    &-text-ia,
    &[data-variant="text-ia"] {
       color: $${prefix}-${colorToken[value].on.enabled.name};
        ${generateInteractiveVariants(colorToken[value].on, 'color')}
    }
}`;
		}

		for (const variant of Object.keys(colorToken[value].bg)) {
			if (colorToken[value].bg[variant].enabled) {
				output += generateBGVariants(
					value,
					variant,
					colorToken[value].bg[variant],
					colorToken[value].on.bg
				);
			} else {
				for (const childVariant of Object.keys(
					colorToken[value].bg[variant]
				)) {
					output += generateBGVariants(
						value,
						variant + '-' + childVariant,
						colorToken[value].bg[variant][childVariant],
						colorToken[value].on.bg
					);
				}
			}
		}
	}

	return output;
};
