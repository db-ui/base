/**
 * Generate Color Utilities (Classes and SCSS Placeholders) for color dependencies
 * according to definitions made by DB UI v3
 */

const prefix = 'db';

const generateInteractiveVariants = (currentColorObj, cssProp) => {
	return `
        &:hover {
            ${cssProp}: $${prefix}-${currentColorObj.hover.name};
        }

        &:active {
            ${cssProp}: $${prefix}-${currentColorObj.pressed.name};
        }
        `;
};

/**
 * some backgrounds have more than one variant with the same color for text (on-color)
 * e.g. neutral with variants 1-6
 */

const generateBGVariants = (value, index, currentColorObj, baseColorObj) => {
	return `
%${prefix}-bg-${value}-${index}{    
    background-color: $${prefix}-${currentColorObj.enabled.name};
    color: $${prefix}-${baseColorObj.enabled.name};

    &-ia,
    &[data-variant="ia"] {
        @extend %${prefix}-bg-${value}-${index};

        ${generateInteractiveVariants(currentColorObj, 'background-color')}
    }

    &-text-ia,
    &[data-variant="text-ia"] {
        color: $${prefix}-${baseColorObj.enabled.name};

         ${generateInteractiveVariants(baseColorObj, 'color')}
    }

    %weak {
        color: $${prefix}-${baseColorObj.weak.enabled.name};

        &-ia,
        &[data-variant="ia"] {
            color: $${prefix}-${baseColorObj.weak.enabled.name};

            ${generateInteractiveVariants(baseColorObj.weak, 'color')}
        }
    }
}
`;
};

/**
 * generates color utility classes and scss placeholders for non-interactive and interactive variants
 * of color combination (background-color and color) based on definitions made by DB UI v3
 *
 * @param {*} colorToken scss transform obj generated by styleDictionary
 * @returns scss string
 */
exports.generateColorUtilitityPlaceholder = (colorToken) => {
	let output = '';

	Object.keys(colorToken).forEach((value, index) => {
		output += `/**
* ${value.toUpperCase()} - Placeholder Utilities          
**/
`;
		// 		// text colors
		// 		output += `%${prefix}-text-${value},
		// .${prefix}-text-${value} {
		//     color: $${prefix}-${colorToken[value].enabled.name};
		// }
		// `;
		// text and background colors
		output += `
%${prefix}-bg-${value} {
    background-color: $${prefix}-${colorToken[value].enabled.name};
    color: $${prefix}-${colorToken[value].on.enabled.name};
    
    &-ia,
    &[data-variant="ia"] {
        @extend %${prefix}-bg-${value};
        ${generateInteractiveVariants(colorToken[value], 'background-color')}
    }

    &-text-ia,
    &[data-variant="text-ia"] {
       color: $${prefix}-${colorToken[value].on.enabled.name};
       
        ${generateInteractiveVariants(colorToken[value].on, 'color')}
    }
}`;

		// special case neutral has no default value for enabled
		if (colorToken[value].bg.enabled) {
			// weak variants
			output += `
%${prefix}-bg-${value}-light {    
    background-color: $${prefix}-${colorToken[value].bg.enabled.name};
    color: $${prefix}-${colorToken[value].on.bg.enabled.name};
    
    &-ia,
    &[data-variant="ia"] {
        @extend %${prefix}-bg-${value}-light;
        ${generateInteractiveVariants(colorToken[value].bg, 'background-color')}
    }

    &-text-ia,
    &[data-variant="text-ia"] {
        color: $${prefix}-${colorToken[value].on.bg.enabled.name};

        ${generateInteractiveVariants(colorToken[value].on.bg, 'color')}
    }

    %weak {
        color: $${prefix}-${colorToken[value].on.bg.weak.enabled.name};

        &-ia,
        &[data-variant="ia"] {
            color: $${prefix}-${colorToken[value].on.bg.weak.enabled.name};

            ${generateInteractiveVariants(
				colorToken[value].on.bg.weak,
				'color'
			)}
        }
    }
}
`;
		} else {
			Object.keys(colorToken[value].bg).forEach((variant) => {
				output += generateBGVariants(
					value,
					variant,
					colorToken[value].bg[variant],
					colorToken[value].on.bg
				);
			});
		}
	});

	return output;
};
