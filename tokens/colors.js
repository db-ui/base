/**
 * Generate color values for each baseColor according to state enabled, hover or pressed.
 *
 * Depending on color luminance (threshold 0.1), hover and pressed values are generated by lighten or darken baseColor value.
 *
 * TODO:
 * - generate on colors for all values according to sketch definitions
 * - StyleDictionary export to JSON file to import in sketch (with indexed naming, e.g. 01--neutral)
 * - write sketch plugin for import generated colors in sketch
 */

const Color = require('tinycolor2');

const LUMINANCE_THRESHOLD = 0.1;

const baseColors = {
	neutral: { r: 255, g: 255, b: 255 },
	neutralBackground01: { r: 248, g: 249, b: 249 },
	neutralBackground02: { r: 242, g: 243, b: 244 },
	neutralBackground03: { r: 236, g: 236, b: 237 },
	neutralBackground04: { r: 230, g: 230, b: 232 },
	neutralBackground05: { r: 224, g: 225, b: 227 },
	neutralBackground06: { r: 217, g: 219, b: 221 },
	primary: { r: 236, g: 0, b: 22 },
	primaryBackground: { r: 250, g: 191, b: 196 },
	secondary: { r: 40, g: 45, b: 55 },
	secondaryBackground: { r: 195, g: 196, b: 199 },
	success: { r: 67, g: 122, b: 18 },
	successBackground: { r: 206, g: 222, b: 191 },
	information: { r: 0, g: 135, b: 185 },
	informationBackground: { r: 184, g: 221, b: 235 },
	warning: { r: 240, g: 80, b: 0 },
	warningBackground: { r: 250, g: 206, b: 184 },
	critical: { r: 236, g: 0, b: 22 },
	criticalBackground: { r: 249, g: 184, b: 190 }
};

// Use a reduce function to take the array of keys in baseColor
// and map them to an object with the same keys.
module.exports = {
	color: Object.keys(baseColors).reduce((ret, color) => {
		return Object.assign({}, ret, {
			[color]: {
				// generate the shades/tints for each color
				enabled: {
					value: Color(baseColors[color]).toHexString()
				},
				hover: {
					value:
						Color(baseColors[color]).getLuminance() <
						LUMINANCE_THRESHOLD
							? Color(baseColors[color]).brighten(8).toHexString()
							: Color(baseColors[color]).darken(5.7).toHexString()
				},
				pressed: {
					value:
						Color(baseColors[color]).getLuminance() <
						LUMINANCE_THRESHOLD
							? Color(baseColors[color])
									.brighten(20)
									.toHexString()
							: Color(baseColors[color]).darken(11).toHexString()
				}
			}
		});
	}, {})
};
